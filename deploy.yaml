- hosts: localhost
  vars:
    VCSA_iso: "{{ lookup('env','HOME') }}/Downloads/VMware-VCSA-all-6.7.0-11726888.iso"
    vcenter_hostname: '192.168.123.90'
    vcenter_username: 'administrator@vsphere.local'
    vcenter_password: '!234AaAa56'
    datacenter_name: dc_ansible
    datacenter_folder_name: vm1
    datastore_name: esx_lab
    nfs_dir: /srv/esx_lab
    nfs_export: /etc/exports
  handlers:
  - name: reload NFS server
    systemd:
      name: nfs-server
      state: restarted
    become: true
  tasks:
  - name: Export the NFS share
    lineinfile:
      path: /etc/exports
      line: /srv/esx_lab 192.168.123.0/255.255.255.0(rw,anonuid=1000,anongid=1000)
      regex: '^/srv/esx_lab'
    notify: reload NFS server
    become: true

  - name: Mount VMFS datastores to ESXi
    vmware_host_datastore:
        hostname: '{{ hostvars[item].ansible_host }}'
        username: root
        password: root
        datastore_name: '{{ datastore_name }}'
        datastore_type: nfs
        nfs_server: 192.168.123.1
        nfs_path: /srv/esx_lab
        nfs_ro: no
        vmfs_version: 6
        esxi_hostname: '{{ item }}'
        state: present
        validate_certs: no
    with_items: "{{ groups['all'] }}"
  - name: Mount point
    file:
      name: mount
      state: directory
  - name: Mount DVD read-only
    mount:
      path: mount
      src: '{{ VCSA_iso }}'
      fstype: iso9660
      opts: loop,ro
      state: mounted
    become: true

# TODO restore the appliance, if it's available
# [esx_lab] vCenter-Server-Appliance_5/vCenter-Server-Appliance_5.vmx

  - name: Prepare the vCSA_on_ESXi.json
    template:
      src: vCSA_on_ESXi.json.j2
      dest: /tmp/vCSA_on_ESXi.json

  - name: Start the deployment of vCSA
    shell: "./vcsa-deploy install -v --accept-eula --no-esx-ssl-verify --acknowledge-ceip /tmp/vCSA_on_ESXi.json > {{ playbook_dir }}/vcsa.log 2>&1"
    args:
      chdir: "{{ playbook_dir }}/mount/vcsa-cli-installer/lin64"
      creates: "{{ playbook_dir }}/vcsa.log"

  - name: Create Datacenter
    vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: present
      validate_certs: no

  - name: Create a VM folder on given Datacenter
    vcenter_folder:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: '{{ datacenter_name }}'
      folder_name: my_vm
      folder_type: vm
      state: present
      validate_certs: no

  - name: Create Cluster
    vmware_cluster:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      cluster_name: cluster
      validate_certs: no

  - name: Add ESXi Hosts to vCenter
    vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      cluster_name: cluster
      esxi_hostname: '{{ hostvars[item].ansible_host }}'
      esxi_username: 'root'
      esxi_password: 'root'
      state: present
      validate_certs: no
    with_items: "{{ groups['all'] }}"

  - name: Create a snapshot of the vCenter
    vmware_guest_snapshot:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: '{{ datacenter_name }}'
      name: "vCenter-Server-Appliance"
      folder: 'my_vm'
      state: present
      snapshot_name: snap_vcenter
      description: snap1_description
      validate_certs: no

  - name: Create a VM
    vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      validate_certs: no
      folder: 'my_vm'
      cluster: cluster
      name: test_vm_0001
      state: poweredon
      guest_id: debian8_64Guest
      disk:
      - size_gb: 1
        type: thin
        datastore: '{{ datastore_name }}'
      cdrom:
        type: iso
        iso_path: "[{{ datastore_name }}] isos/alpine-virt-3.9.2-x86_64.iso"
      hardware:
        memory_mb: 512
        num_cpus: 1
        scsi: paravirtual
      wait_for_ip_address: yes
      validate_certs: no
